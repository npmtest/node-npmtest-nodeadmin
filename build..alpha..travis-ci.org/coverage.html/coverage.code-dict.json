{"/home/travis/build/npmtest/node-npmtest-nodeadmin/test.js":"/* istanbul instrument in package npmtest_nodeadmin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nodeadmin/lib.npmtest_nodeadmin.js":"/* istanbul instrument in package npmtest_nodeadmin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nodeadmin = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nodeadmin = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nodeadmin/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nodeadmin && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nodeadmin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nodeadmin\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nodeadmin.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nodeadmin.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nodeadmin.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nodeadmin.__dirname + '/lib.npmtest_nodeadmin.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nodeadmin/node_modules/nodeadmin/middleware/index.js":"var express = require('express');\nvar bodyParser = require('body-parser');\nvar http = require('http');\nvar sock = require('socket.io');\nvar morgan = require('morgan');\nvar fs = require('fs');\nvar randomstring = require('randomstring')\n\n\n\n// *** NodeAdmin Routers ***\nvar auth = require('./auth/authroutes.js');\nvar database = require('./database/databaseroutes.js');\nvar settings = require('./settings/settingsroutes.js');\nvar system = require('./system/systemroutes.js');\nvar home = require('./home/homeroutes.js');\n\nmodule.exports = function nodeadmin(app, port) {\n  'use strict';\n\n  // ** Socket Connection\n  var server = http.createServer(app);\n  var io = sock(server);\n\n  var expressListen = app.listen;\n  app.listen = server.listen.bind(server);\n\n\n  // ** Socket Controller\n  require('./sockets/socketcontroller.js')(io);\n\n  // ** Logs\n  var accessLogStream = fs.createWriteStream(__dirname + '/serverlogs/access.log', {flags: 'a'});\n  \n    \n  // ** Third party middleware\n  app.use(morgan('dev', {\n    stream:accessLogStream\n  }));\n  app.use(bodyParser.json());\n  app.use(bodyParser.urlencoded({extended: true}));\n  app.use('/nodeadmin', express.static(__dirname + '/public'));\n  // creates secret.js with a random string if it hasn't been initialized\\\\\n  fs.readFile('./secret.js', function(err, data) {\n    if (err.code === 'ENOENT') {\n      var randomString = randomstring.generate();\n      var contents = \"module.exports = '\" + randomString + \"';\";\n      fs.writeFileSync(__dirname + '/secret.js', contents);\n    }\n    var secret = require('./secret.js');\n    app.locals.secret = secret;\n  });\n  \n  // ** Routes\n  app.use('/nodeadmin/api/auth', auth);\n  app.use('/nodeadmin/api/db', database);\n  app.use('/nodeadmin/api/settings',settings);\n  app.use('/nodeadmin/api/system',system);\n  app.use('/nodeadmin/api/home',home);\n\n  // ** Middleware\n  return function nodeadmin(req,res,next) {\n    next();\n  };\n\n\n};\n","/home/travis/build/npmtest/node-npmtest-nodeadmin/node_modules/nodeadmin/middleware/auth/authroutes.js":"var router = require('express').Router();\nvar authcontroller = require('./authcontroller.js');\n\n\nrouter.route('/login')\n  .post(authcontroller.login);\n\n\nrouter.route('/logout')\n  .get(authcontroller.logout);\n\n\nmodule.exports = router;\n","/home/travis/build/npmtest/node-npmtest-nodeadmin/node_modules/nodeadmin/middleware/auth/authcontroller.js":"var client = require('./clientdb.js');\nvar mysql = require('promise-mysql');\nvar jwt = require('jsonwebtoken');\n\nmodule.exports = {\n\n  login: function (req, res) {\n    mysql.createConnection({\n      user: req.body.mysqlUser,\n      password: req.body.mysqlPassword,\n      host: req.body.mysqlHost,\n      multipleStatements: true\n    }).then(function(conn) {\n        var token = jwt.sign({msg: 'welcome!'}, req.app.locals.secret);\n        //Enables performance_schema if it was disabled\\\\\n        conn.query(\n          \"update performance_schema.setup_consumers set enabled='YES' where name='events_waits_current';\", \n          function (err, rows, fields) {\n          }\n        );\n        client.bindClientDB(conn);\n        res.status(200).json({token: token});\n    }).catch(function (e) {\n      if(e.errno === 1045) {\n        res.status(500).json({error: 'We couldn\\'t connect to the host with the credentials you provided. Please try again.'});\n      } else if (e.errno === 'ENOTFOUND') {\n        res.status(500).json({error: 'We couldn\\'t find the host that you provided. Double check to make sure you typed it in correctly and try again.'});\n      } else {\n        res.status(500).json({error: 'something broke.'});\n      }\n    });\n      \n  },\n\n  logout: function(req, res) {\n    // close database connection\n    client.getClientDB().end(function (err){\n      if(!err) {\n        res.status(200).end();\n      } else {\n        res.end(err.toString());\n      }\n    });\n\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-nodeadmin/node_modules/nodeadmin/middleware/auth/clientdb.js":"var jwt = require('jsonwebtoken');\nvar connection = undefined;\n\nmodule.exports = {\n  bindClientDB:function(db) {\n    if(db) {\n      connection = db;\n    }\n\n  },\n  getClientDB:function() {\n    if(!connection) {\n      return {query: function(){ console.error('Error: Attempted to query, but there is no connection to database.') } };\n    } else {\n      return connection;\n    }\n\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-nodeadmin/node_modules/nodeadmin/middleware/database/databaseroutes.js":"/* jshint strict: false, unused: false */\nvar router = require('express').Router();\nvar tokenCheck = require('../auth/tokencheck.js');\nvar DbController = require('./databasecontroller.js');\n\n// require token for all database operations\nrouter.use(tokenCheck);\n\n// foreign keys\nrouter.route('/:database/fk/:refTable/:refColumn')\n  .get(DbController.getForeignValues);  \n\n// create and drop table\nrouter.route('/:database/:table')\n  .delete(DbController.dropTable)\n  .post(DbController.createTable);\n\n// database table\nrouter.route('/:database/tables')\n  .get(DbController.getTables);\n\n// subset of table\nrouter.route('/:database/:table/:page')\n  .get(DbController.getRecords)\n  .put(DbController.updateRecord)\n  .post(DbController.addRecord);  \n\n// database performance\nrouter.route('/performance')\n  .get(DbController.getPerformanceStats);\n\n// database info\nrouter.route('/info')\n  .get(DbController.getInfoStats);\n\n// run query\nrouter.route('/query')\n  .post(DbController.queryClientDB);\n\n// *** return mysql databases\nrouter.route('/db')\n  .get(DbController.getDatabases);\n\nrouter.route('/connect')\n  .get(DbController.connect);\n\n// create datase\nrouter.route('/create')\n  .post(DbController.createDatabase);\n\n// drop database\nrouter.route('/delete')\n  .post(DbController.deleteDatabase)\n\n\nmodule.exports = router;\n","/home/travis/build/npmtest/node-npmtest-nodeadmin/node_modules/nodeadmin/middleware/auth/tokencheck.js":"var jwt = require('jsonwebtoken');\n\nvar tokenCheck = function (req, res, next) {\n  'use strict';\n  var token = req.body.token || req.query.token || req.headers.authorization;\n  if (token) {\n    jwt.verify(token, req.app.locals.secret, function (err, decoded) {\n      if (err) {\n        res.status(403).json({\n          error: err\n        });\n      }\n      next();\n    });\n  }\n};\n\nmodule.exports = tokenCheck;\n\n","/home/travis/build/npmtest/node-npmtest-nodeadmin/node_modules/nodeadmin/middleware/database/databasecontroller.js":"/* jshint strict: false, unused: false */\n\nvar mysql = require('mysql');\nvar client = require('../auth/clientdb.js');\n\n\nmodule.exports = {\n\n  getDatabases: function (req, res) {\n    console.log('database is stored', req.app.locals);\n  },\n\n  connect: function (req, res) {\n    var db = client.getClientDB();\n    db.query('SHOW DATABASES', function (err, row) {\n      row && res.end(JSON.stringify(row));\n    });\n  },\n\n  createDatabase: function (req, res) {\n    var connection = client.getClientDB();\n    var DatabaseName = req.body.name;\n    if (DatabaseName && typeof DatabaseName === 'string' && connection.query) {\n      connection.query('CREATE DATABASE ?? ', [DatabaseName], function (err, result) {\n\n        if (!err) {\n          res.status(201).json(result);\n        } else {\n          res.status(422).json(err);\n        }\n      });\n    }\n  },\n\n  deleteDatabase: function (req, res) {\n    var connection = client.getClientDB();\n    var DatabaseName = req.body.name;\n\n    if (DatabaseName && typeof DatabaseName === 'string' && connection.query) {\n      connection.query('DROP DATABASE ?? ', [DatabaseName], function (err, result) {\n\n        if (!err) {\n          res.end(null, JSON.stringify(result));\n        } else {\n          res.end(JSON.stringify(err), null);\n        }\n      });\n    }\n  },\n\n  getTables: function (req, res) {\n    var db = req.params.database;\n    var connection = client.getClientDB();\n\n    connection.query('USE ??', [db], function (err, result) {\n      if (err) {\n        console.log(err);\n        res.status(500).send(err.toString());\n      }\n      connection.query('SHOW TABLES', function (err, result) {\n        if (err) {\n          console.log(err);\n          res.status(500).send(err.toString());\n        } else {\n          res.status(200).json(result);\n        }\n      });\n    });\n  },\n\n  dropTable: function (req, res) {\n    var db = req.params.database;\n    var table = req.params.table;\n    var connection = client.getClientDB();\n\n    connection.query('USE ??', [db], function (err, result) {\n      if (err) {\n        console.log(err);\n        res.status(500).send(err.toString());\n      }\n      connection.query('DROP TABLE ??', [table], function (err, result) {\n        if (err) {\n          console.log(err);\n          // Displays human-readable errors\n          res.status(500).send(err.toString());\n        } else {\n          res.status(200).send(table);\n        }\n      });\n    });\n  },\n\n  createTable: function(req, res) {\n    var connection = client.getClientDB();\n    var database = req.params.database;\n    var table = req.params.table;\n    var schema = req.body;\n\n    // ** PER FIELD\n    // P_K = PRIMARY KEY, IND = INDEX, UQ = UNIQUE\n    // __________________________\n    // fieldName                       --> required\n    // [\n    //   type,                         --> required\n    //   (fieldLength)                 --> optional for every type almost\n    // ]\n    // default                         --> constant\n    // null _alias_ ([NULL, NOT NULL]) --> if !Pri_Key\n    // quality [\n    //          PK,                    --> only 1\n    //          IND,                   -->\n    //          UQ                     --> if !NULL\n    // ]\n\n\n    var query = 'CREATE TABLE ??.?? ( ';\n    var placeholders = [].concat(database, table);\n\n    var indexes = [];\n\n\n    // loop through table field definitions\n    while(schema.length) {\n\n      // pop off field definition\n      var row = schema.shift();\n\n      // *** fieldName ***\n      try {\n        query+= ' ?? ';\n        placeholders.push(row['fieldName']);\n\n      } catch(e) {}\n\n      // *** type & ([fieldLength]) ***\n      try {\n\n        var _type = row['type'];\n        var _length = row['fieldLength'];\n\n        if ( _length) {\n\n          //  check if length is a number or string\n          if(!isNaN(_length)) {\n            _type += ['(', row['fieldLength'], ')'].join('');\n          } else if(typeof _length === 'string') {\n            // return string with placeholders and add to global query\n            var enumPlaceholders =  _length.split(',').map(function (enumval, ind, arr) {\n              placeholders.push(enumval);\n              return '?';\n            }).join(',');\n\n            _type += ['(', enumPlaceholders , ')'].join('');\n          }\n        }\n\n        query += _type.concat(' ');\n\n      } catch (e) {}\n\n      // *** null ***\n      query += row['null'] ? 'NULL ' : 'NOT NULL ';\n\n      // *** default ***\n      if(row['default'] && row['default'] !== '') {\n        if(row['default'] !== 'CURRENT_TIMESTAMP' && row['default'] !== 'NULL' ) {\n          query+='DEFAULT ?';\n          placeholders.push(row['default']);\n        } else {\n          query+= 'DEFAULT ' + row['default'].concat(' ');\n        }\n      }\n\n      // *** quality ***\n      if(row['quality']) {\n        if( row['quality'] !== 'INDEX') {\n          query += row['quality'].concat(' ');\n        } else {\n          indexes.push(row['fieldName']);\n        }\n      }\n\n      // *** A_I ***\n      if(row['auto']) {\n        query += \"AUTO_INCREMENT \";\n      }\n\n      // comma insertion check\n      schema.length >= 1 ?  query+= ' , \\n' : ' ';\n\n    }\n\n    // check indexes\n    if(indexes.length >= 1) {\n      query += ', \\n ';\n      query += 'INDEX('+indexes[0]+') ';\n    }\n\n    // close query statement\n    query+= ')';\n\n    connection.query(query, placeholders, function (err, result, fields) {\n      if(err) {\n        res.status(400).json(err);\n      } else {\n        res.status(201).json(result);\n      }\n    })\n  },\n\n  getRecords: function(req, res) {\n    var db = req.params.database,\n      table = req.params.table,\n      rowCount = 100, //Shouldn't be hardcoded, need to add a query to get request, but this will do for now\n      offset = req.params.page > 1 ? req.params.page * rowCount : 0,\n      sortBy = req.query.sortBy,\n      sortDir = req.query.sortDir,\n      limit = [offset, rowCount],\n      connection = client.getClientDB();\n    connection.query({\n      sql: 'USE ??',\n      timeout: 40000,\n      values: [db]\n    }, function (err, result) {\n      if (err) {\n        res.status(500).json(err);\n      }\n      connection.query('SHOW TABLES', function (err, result) {\n        if (err) {\n          console.log(err);\n        }\n        var tables = [];\n        result.forEach(function(table) {\n          for (var key in table) {\n            tables.push(table[key]);\n          }\n        });\n\n        var tableStr = '';\n        if (tables.length === 1) {\n          //if there is no foreign key constraints\n          tableStr = '\\'' + tables[0] + '\\'';\n        } else {\n          for (var i = 0; i < tables.length; i++) {\n            if (tableStr === '') {\n              tableStr += '(\\'' + tables[i] + '\\' ';\n            } else if (i === tables.length -1) {\n              tableStr += 'OR \\'' + tables[i] + '\\')';\n            } else {\n              tableStr += 'OR \\'' + tables[i] + '\\' ';\n            }\n          }\n        }\n\n        if (sortBy && sortDir) {\n\n          connection.query({\n            sql: 'SELECT * FROM ?? ORDER BY ?? ' + sortDir +  ' LIMIT ?; DESCRIBE ??; SELECT count(*) FROM ??; SELECT TABLE_NAME, COLUMN_NAME, CONSTRAINT_NAME, REFERENCED_TABLE_NAME, REFERENCED_COLUMN_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE REFERENCED_TABLE_NAME=' + tableStr + ' AND TABLE_NAME=?',\n            timeout: 40000,\n            values: [table, sortBy, limit, table, table, table]\n          }, function (err, result, fields) {\n            if (err) {\n              console.log(err);\n            }\n            res.status(200).json(result);\n          });\n        } else {\n        connection.query({\n          sql: 'SELECT * FROM ?? LIMIT ?; DESCRIBE ??; SELECT count(*) FROM ??; SELECT TABLE_NAME, COLUMN_NAME, CONSTRAINT_NAME, REFERENCED_TABLE_NAME, REFERENCED_COLUMN_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE REFERENCED_TABLE_NAME=' + tableStr + ' AND TABLE_NAME=?',\n          timeout: 40000,\n          values: [table, limit, table, table, table]\n        }, function (err, result, fields) {\n          if (err) {\n            console.log(err);\n          }\n          res.status(200).json(result);\n        });\n\n        }\n      });\n    });\n  },\n\n  updateRecord: function (req, res) {\n    var db = req.params.database,\n      table = req.params.table,\n      column = req.body.col,\n      value = req.body.val,\n      primaryKeyColumn = req.body.pk,\n      primaryKeyValue = value[req.body.pk],\n      columnValuePiars = [],\n      connection = client.getClientDB();\n    var str = '';\n    for (var key in value) {\n      str += key + ' = ' + '\\'' + value[key] + '\\'' + ', ';\n      columnValuePiars.push(str);\n    }\n    str = str.substr(0, str.length - 2);\n    connection.query({\n      sql: 'USE ??',\n      timeout: 40000,\n      values: [db]\n    }, function (err, result) {\n      if (err) {\n        res.status(500).json(err);\n      }\n      connection.query({\n        sql: 'UPDATE ?? SET ' + str + ' WHERE ' + primaryKeyColumn + ' = ?',\n        timeout: 40000,\n        values: [table, primaryKeyValue]\n      }, function (err, result) {\n        if (err) {\n          console.log(err);\n          res.status(500).json(err);\n        }\n        res.status(200).json(result);\n      });\n    });\n  },\n\n  addRecord: function (req, res) {\n    var database = req.params.database,\n      table = req.params.table,\n      columns = Object.keys(req.body),\n      values = [],\n      connection = client.getClientDB();\n\n    for (var key in req.body) {\n      values.push(req.body[key]);\n    }\n\n    connection.query({\n      sql: 'USE ??',\n      timeout: 40000,\n      values: [database]\n    }, function (err, result) {\n      if (err) {\n        res.status(500).json(err);\n      }\n      connection.query({\n        sql: 'INSERT INTO ?? (??) VALUES (?)',\n        timeout: 40000,\n        values: [table, columns, values]\n      }, function (err, result) {\n        if (err) {\n          res.status(500).json(err);\n        }\n        res.status(201).json(result);\n      });\n    });\n  },\n\n  getForeignValues: function (req, res) {\n    var db = req.params.database,\n      table = req.params.refTable,\n      column = req.params.refColumn,\n      connection = client.getClientDB();\n    connection.query({\n      sql: 'USE ??',\n      timeout: 40000,\n      values: [db]\n    }, function (err, result) {\n      if (err) {\n        console.log(err);\n      }\n      connection.query({\n        sql: 'SELECT DISTINCT(??) FROM ??',\n        timeout: 40000,\n        values: [column, table]\n      }, function (err, results) {\n        if (err) {\n          console.log(err);\n        }\n        res.status(201).json(results);\n      });\n    });\n  },\n\n  getPerformanceStats: function (req, res) {\n    var db = 'performance_schema';\n    var table = 'performance_timers';\n    var connection = client.getClientDB();\n\n    connection.query('SELECT * FROM ??.??', [db, table], function (err, result) {\n      if (err) {\n        console.log(err);\n      }\n      res.status(200).json(result);\n    });\n  },\n\n  getInfoStats: function (req, res) {\n    var db = 'information_schema';\n    var table = 'processlist';\n    var connection = client.getClientDB();\n\n    connection.query('SELECT * FROM ??.??', [db, table], function (err, result) {\n      if (err) {\n        console.log(err);\n      }\n      res.status(200).json(result);\n    });\n  },\n\n  queryClientDB: function (req, res) {\n    var connection = client.getClientDB();\n\n    connection.query(req.body.data.query, function (err, result) {\n      if (err) {\n        res.status(400).json(err);\n      } else {\n        res.status(200).json(result);\n      }\n    });\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-nodeadmin/node_modules/nodeadmin/middleware/settings/settingsroutes.js":"var express = require('express');\nvar router = express.Router();\nvar tokenCheck = require('../auth/tokencheck.js');\nvar SettingsController = require('./settingscontroller.js');\n\nrouter.use(tokenCheck);\n\n\nrouter.route('/users')\n  .get(SettingsController.getUsers)\n  .post(SettingsController.addUser);\n\nrouter.route('/users/:user/:host')\n  .put(SettingsController.editUser)\n  .delete(SettingsController.deleteUser);\n\n// 'SHOW GRANTS' per user\nrouter.route('/users/:user/:host/grants')\n  .get(SettingsController.getGrants);\n\n// Get grants record per user for editing\nrouter.route('/users/:user/:host/grantsrecord')\n  .get(SettingsController.getGrantsRecord)\n  .put(SettingsController.editGrantsRecord);\n\nrouter.route('/users/grantsdescription')\n  .get(SettingsController.getGrantsDescription);\n\nmodule.exports = router;\n\n","/home/travis/build/npmtest/node-npmtest-nodeadmin/node_modules/nodeadmin/middleware/settings/settingscontroller.js":"var mysql = require('mysql');\nvar client = require('../auth/clientdb.js');\n\nmodule.exports = {\n  getUsers: function(req, res) {\n    var connection = client.getClientDB();\n\n    connection.query('USE mysql', function(err, result) {\n      if (err) {\n        console.log(err);\n        res.status(500).send(err.toString());\n      }\n      connection.query('SELECT host, user FROM user', function(err, result) {\n        if (err) {\n          console.log(err);\n          res.status(500).send(err.toString());\n        } else {\n          res.status(200).json(result);\n        }\n      });\n    });\n  },\n\n  addUser: function(req, res) {\n    var connection = client.getClientDB();\n    var user = req.body.user;\n    var password = req.body.password;\n    var host = req.body.host || 'localhost';\n\n    if (!password) {\n      connection.query(\"CREATE USER \" + \"'\" + user + \"'\" + \"@\" + \"'\" + host + \"'\" + \"\", function(err, result) {\n        if (err) {\n          console.log(err);\n          res.status(500).send(err.toString());\n        } else {\n          // Default grant all to new users\n          connection.query(\"GRANT ALL ON *.* TO \" + \"'\" + user + \"'\" + \"@\" + \"'\" + host + \"'\" + \"\", function(err, result) {\n            if (err) {\n              console.log(err);\n              res.status(500).send(err.toString());\n            } else {\n              connection.query('FLUSH PRIVILEGES', function(err, result) {\n                if (err) {\n                  console.log(err);\n                  res.status(500).send(err.toString());\n                } else {\n                  res.status(201).send(result);\n                }\n              });\n            }\n          });\n        }\n      });\n    } else {\n      connection.query(\"CREATE USER \" + \"'\" + user + \"'\" + \"@\" + \"'\" + host + \"'\" + \"IDENTIFIED BY \" + \"'\" + password + \"'\" + \"\", function(err, result) {\n        if (err) {\n          console.log(err);\n          res.status(500).send(err.toString());\n        } else {\n          // Default grant all to new users\n          connection.query(\"GRANT ALL ON *.* TO \" + \"'\" + user + \"'\" + \"@\" + \"'\" + host + \"'\" + \"\", function(err, result) {\n            if (err) {\n              console.log(err);\n              res.status(500).send(err.toString());\n            } else {\n              connection.query('FLUSH PRIVILEGES', function(err, result) {\n                if (err) {\n                  console.log(err);\n                  res.status(500).send(err.toString());\n                } else {\n                  res.status(201).send(result);\n                }\n              })\n            }\n          })\n        }\n      });\n    }\n  },\n\n  editUser: function(req, res) {\n    var connection = client.getClientDB();\n    var newData = req.body.newData;\n    var oldData = req.body.oldData;\n    var user = req.params.user;\n    var host = req.params.host;\n    var newUser;\n    var newHost;\n\n    if (oldData === user) {\n      newUser = newData;\n      newHost = host;\n    } else if (oldData === host) {\n      newHost = newData;\n      newUser = user;\n    }\n\n    connection.query('RENAME USER ?@? TO ?@?', [user, host, newUser, newHost], function(err, result) {\n      if (err) {\n        console.log(err);\n        res.status(500).send(err.toString());\n      } else {\n        connection.query('FLUSH PRIVILEGES', function(err, result) {\n          if (err) {\n            console.log(err);\n            res.status(500).send(err.toString());\n          } else {\n            res.status(200).send(true);\n          }\n        });\n      }\n    });\n\n  },\n\n  deleteUser: function(req, res) {\n    var connection = client.getClientDB();\n    var host = req.params.host;\n    var user = req.params.user;\n\n    connection.query(\"DROP USER \" + \"'\" + user + \"'\" + \"@\" + \"'\" + host + \"'\" + \"\", function(err, result) {\n      if (err) {\n        console.log(err);\n        res.status(500).send(err.toString());\n      } else {\n        res.status(200).send(result);\n      }\n    });\n  },\n\n  getGrants: function(req, res) {\n    var user = req.params.user;\n    var host = req.params.host;\n    var connection = client.getClientDB();\n\n    connection.query(\"SHOW GRANTS FOR \" + \"'\" + user + \"'\" + \"@\" + \"'\" + host + \"'\" + \"\", function(err, result) {\n      if (err) {\n        console.log(err);\n        res.status(500).send(err.toString());\n      } else {\n        res.status(200).send(result);\n      }\n    });\n  },\n\n  getGrantsRecord: function(req, res) {\n    var user = req.params.user;\n    var host = req.params.host;\n    var connection = client.getClientDB();\n\n    connection.query(\"SELECT * FROM mysql.user WHERE user = \" + \"'\" + user + \"'\" + \" AND host =  \" + \"'\" + host + \"'\" + \"; DESCRIBE mysql.user\", function(err, result) {\n      if (err) {\n        console.log(err);\n        res.status(500).send(err.toString());\n      } else {\n        res.status(200).send(result);\n      }\n    })\n  },\n\n  editGrantsRecord: function(req, res) {\n    var connection = client.getClientDB();\n    var user = req.params.user;\n    var host = req.params.host;\n    var column = req.body.column;\n    var val = req.body.val;\n\n    if (val === 'grant') {\n      connection.query(\"GRANT ALL ON *.* TO \" + \"'\" + user + \"'\" + \"@\" + \"'\" + host + \"'\" + \"\", function(err, result) {\n        if (err) {\n          console.log(err);\n          res.status(500).send(err.toString());\n        } else {\n          connection.query('FLUSH PRIVILEGES', function(err, result) {\n            if (err) {\n              console.log(err);\n              res.status(500).send(err.toString());\n            } else {\n              res.status(200).send(result);\n            }\n          })\n        }\n      })\n    } else if (val === 'revoke') {\n      connection.query(\"REVOKE ALL PRIVILEGES, GRANT OPTION FROM \" + \"'\" + user + \"'\" + \"@\" + \"'\" + host + \"'\" + \"\", function(err, result) {\n        if (err) {\n          console.log(err);\n          res.status(500).send(err.toString());\n        } else {\n          connection.query('FLUSH PRIVILEGES', function(err, result) {\n            if (err) {\n              console.log(err);\n              res.status(500).send(err.toString());\n            } else {\n              res.status(200).send(result);\n            }\n          })\n        }\n      });\n    } else {\n      if (val === 'Y') {\n        connection.query(\"GRANT \" + column + \" ON *.* TO \" + \"'\" + user + \"'\" + \"@\" + \"'\" + host + \"'\" + \"\", function(err, result) {\n          if (err) {\n            console.log(err);\n            res.status(500).send(err.toString());\n          } else {\n            connection.query('FLUSH PRIVILEGES', function(err, result) {\n              if (err) {\n                console.log(err);\n                res.status(500).send(err.toString());\n              } else {\n                res.status(200).send(result);\n              }\n            })\n          }\n        })\n      } else if (val === 'N') {\n        connection.query(\"REVOKE \" + column + \" ON *.* FROM \" + \"'\" + user + \"'\" + \"@\" + \"'\" + host + \"'\" + \"\", function(err, result) {\n          if (err) {\n            console.log(err);\n            res.status(500).send(err.toString());\n          } else {\n            connection.query('FLUSH PRIVILEGES', function(err, result) {\n              if (err) {\n                console.log(err);\n                res.status(500).send(err.toString());\n              } else {\n                res.status(200).send(result);\n              }\n            })\n          }\n        })\n      }\n    }\n  },\n\n  getGrantsDescription: function(req, res) {\n    var connection = client.getClientDB();\n\n    connection.query('SHOW PRIVILEGES', function(err, result) {\n      if (err) {\n        console.log(err);\n        res.status(500).send(err.toString());\n      } else {\n        res.status(200).send(result);\n      }\n    })\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-nodeadmin/node_modules/nodeadmin/middleware/system/systemroutes.js":"var express = require('express');\nvar router = express.Router();\nvar tokenCheck = require('../auth/tokencheck.js');\nvar SystemController = require('./systemcontroller.js');\n\nrouter.use(tokenCheck);\n\nrouter.route('/modules')\n  .get(SystemController.getNpmModules);\n\nmodule.exports = router;\n","/home/travis/build/npmtest/node-npmtest-nodeadmin/node_modules/nodeadmin/middleware/system/systemcontroller.js":"var exec = require('child_process').exec;\n\nmodule.exports = {\n\n  getNpmModules: function(req, res) {\n    exec('npm list --long', function(err, stdout, stderr) {\n      if (err) {\n        //console.log('Error executing npm list --long: ', err);\n      }\n      res.send({\"stdout\": stdout, \"stderr\": stderr });\n    });\n  },\n  \n};\n","/home/travis/build/npmtest/node-npmtest-nodeadmin/node_modules/nodeadmin/middleware/home/homeroutes.js":"var Promise = require('bluebird');\nvar router = require('express').Router();\nvar HomeController = Promise.promisifyAll(require('./homecontroller'));\nvar tokenCheck = require('../auth/tokencheck.js');\n\nrouter.use(tokenCheck);\n\nrouter.route('/os')\n  .get(function (req, res) {\n    'use strict';\n    Promise.all([\n      HomeController.getHostnameAsync(),\n      HomeController.getUptimeAsync(),\n      HomeController.getTypeAsync(),\n      HomeController.getLoadAvgAsync(),\n      HomeController.getTotalMemoryAsync()\n    ])\n    .then(function (stats){\n      var sys = {};\n\n      sys['hostname'] = stats[0];\n      sys['uptime'] = stats[1];\n      sys['type'] = stats[2];\n      sys['load'] = stats[3];\n      sys['memory'] = stats[4];\n      res.end(JSON.stringify(sys));\n    })\n    .catch(function (err){\n      console.error('couldn\\'t query system stats', err);\n      res.end();\n    });\n\n  });\n\nrouter.route('/connections')\n  .get(function (req, res){\n    'use strict';\n    HomeController.getServerConnectionsAsync(req)\n      .then(function (data) {\n      })\n      .catch(function (err) {\n        res.status(500).json(err);\n      });\n  });\n\nrouter.route('/cpu')\n  .get(function (req, res) {\n    'use strict';\n    HomeController.getCpusAsync()\n      .then(function (cpus){\n        res.status(200).json(cpus);\n      })\n      .catch(function (err){\n        res.status(500).json(err);\n      });\n  });\n\nmodule.exports = router;\n","/home/travis/build/npmtest/node-npmtest-nodeadmin/node_modules/nodeadmin/middleware/home/homecontroller.js":"var OS = require('os');\nvar spawn = require('child_process').spawn;\nvar server = require('net');\n\nmodule.exports = {\n\n  getHostname:function(callback) {\n    return callback(null, OS.hostname());\n  },\n\n  getType:function(callback) {\n    return callback(null, OS.type());\n  },\n\n  getUptime:function(callback) {\n    return callback(null, OS.uptime())\n  },\n\n  getLoadAvg:function(callback) {\n    return callback(null, OS.loadavg());\n  },\n\n  getTotalMemory: function(callback) {\n    return callback(null, OS.totalmem());\n  },\n\n  getFreeMemory: function(callback) {\n    return OS.freemem();\n  },\n\n  getServerConnections: function(req, callback) {\n    // req.connection.server\n  },\n\n  getCpus: function(callback) {\n    return OS.cpus();\n  }\n\n};\n\n\n\n\n","/home/travis/build/npmtest/node-npmtest-nodeadmin/node_modules/nodeadmin/gulpfile.js":"var gulp = require('gulp');\nvar babel = require('gulp-babel');\nvar browserify = require('gulp-browserify');\nvar concat = require('gulp-concat');\nvar uglify = require('gulp-uglify');\nvar rename = require('gulp-rename');\n\n\nvar path = {\n  app:'middleware/public/src/app.js',\n  babel_dest:'middleware/public/dist'\n}\n\n\ngulp.task('transform', function(){\n\n  gulp.src(path.app)\n    .pipe(babel())\n    .pipe(browserify({\n      insertGlobals:true\n\n    }))\n    .pipe(rename('bundle.js'))\n    .pipe(gulp.dest(path.babel_dest));\n\n});\n  \n\n\ngulp.task('default', function (){\n  gulp.watch('middleware/public/src/app.js', ['transform']);\n\n});\n\ngulp.task('build', ['transform']);\n","/home/travis/build/npmtest/node-npmtest-nodeadmin/node_modules/nodeadmin/middleware/secret.js":"module.exports = 'lz1l44gVcWR0EWgqpEDKA78hdK3ZDZz6';","/home/travis/build/npmtest/node-npmtest-nodeadmin/node_modules/nodeadmin/testserver/index.js":"var express = require('express');\nvar app = express();\nvar mysql = require('mysql');\n\nvar nodeadmin = require(__dirname + '/../middleware/index.js');\n\n\napp.use(nodeadmin(app, process.env.PORT || 4040));\napp.use('/', function(req, res, next) {\n\n  res.send('<h1>HELLO WORLD</h1>');\n\n});\n\napp.listen(process.env.PORT || 4040);\n\nmodule.exports = app;\n","/home/travis/build/npmtest/node-npmtest-nodeadmin/node_modules/nodeadmin/middleware/sockets/socketcontroller.js":"var spawn = require('child_process').spawn;\nvar HomeController = require('../home/homecontroller');\nvar fs = require('fs');\nvar ls;\n\nmodule.exports = function (io) {\n  io.of('/system').on('connection', function (socket) {\n    socket.on('getlogs', function () {\n      ls = ls || spawn('tail', ['-f', __dirname + \"/../serverlogs/access.log\"]);\n      ls.stdout.on('readable', function() {\n        var buffer = this.read();\n        if(buffer !== null) {\n          var asMessage = buffer.toString();\n          socket.emit('logs', asMessage);\n        }\n      });  \n    });\n    socket.on('stoplogs', function () {\n      ls.kill();\n      ls.on('exit', function () {\n        ls = null;\n        fs.truncate(__dirname + '/../serverlogs/access.log');\n      });\n    });\n\n  });\n\n  io.of('/home').on('connection', function(socket) {\n    var memoryTick, cpuTick;\n    socket.on('pressure', function(){\n      socket.emit('memory', HomeController.getFreeMemory());\n      memoryTick = setInterval(function(){\n        socket.emit('memory', HomeController.getFreeMemory());\n      }, 2500);\n    });\n    socket.on('endpressure', function () {\n      clearInterval(memoryTick);\n    });\n    socket.on('clientcpu', function(){\n      socket.emit('servercpu', HomeController.getCpus());\n      cpuTick = setInterval(function(){\n        socket.emit('servercpu', HomeController.getCpus());\n      }, 500);\n    });\n    socket.on('endclientcpu', function () {\n      clearInterval(cpuTick);\n    });\n  });\n\n}\n","/home/travis/build/npmtest/node-npmtest-nodeadmin/node_modules/nodeadmin/middleware/util/databaseutilities.js":"\n\nmodule.exports = {\n\n}\n","/home/travis/build/npmtest/node-npmtest-nodeadmin/node_modules/nodeadmin/middleware/public/app/app.js":"angular.module('nodeadmin', [\n  'nodeadmin.services',\n  'nodeadmin.togglemenu',\n  'nodeadmin.alertcenter',\n  'nodeadmin.alertcenterfactory',\n  'nodeadmin.socket',\n  'nodeadmin.home',\n  'nodeadmin.auth',\n  'nodeadmin.main',\n  'nodeadmin.settings',\n  'nodeadmin.settings.users',\n  'nodeadmin.settings.viewprivileges',\n  'nodeadmin.settings.editprivileges',\n  'nodeadmin.settings.adduser',\n  'nodeadmin.settings.deleteUser',\n  'nodeadmin.system',\n  'nodeadmin.system.modules',\n  'nodeadmin.system.logs',\n  'nodeadmin.db',\n  'nodeadmin.db.dbhome',\n  'nodeadmin.db.createdb',\n  'nodeadmin.db.deletedb',\n  'nodeadmin.db.viewTables',\n  'nodeadmin.db.createtable',\n  'nodeadmin.db.deleteTable',\n  'nodeadmin.db.query',\n  'nodeadmin.records',\n  'nodeadmin.records.services',\n  'ui.router',\n  'ui.bootstrap',\n  'chart.js',\n  'angular-toArrayFilter',\n  'pasvaz.bindonce',\n  'angularSpinner'\n])\n.config(function ($stateProvider, $urlRouterProvider, $httpProvider) {\n  $stateProvider\n    .state('login', {\n      url: '/login',\n      templateUrl: './app/auth/login.html',\n      controller: 'AuthController',\n      data: {\n        requireLogin: false\n      }\n    })\n\n    .state('main', {\n      abstract: true,\n      url: '/',\n      templateUrl: 'app/main/main.html',\n      controller: 'AuthController',\n      data: {\n        requireLogin: true\n      }\n    })\n\n    .state('home', {\n      parent: 'main',\n      url: '',\n      templateUrl: 'app/home/home.html',\n      controller: 'HomeController',\n      data: {\n        requireLogin: true\n      }\n    })\n\n    .state('settings', {\n      abstract: true,\n      parent: 'main',\n      url: 'settings',\n      templateUrl: 'app/settings/settings.html',\n      controller: 'SettingsController',\n      data: {\n        requireLogin: true\n      }\n    })\n    .state('users', {\n      parent: 'settings',\n      url: '',\n      templateUrl: 'app/settings/users/users.html',\n      controller: 'UsersController',\n      data: {\n        requireLogin: true\n      }\n    })\n    .state('grants', {\n      parent: 'settings',\n      url: '/:user?host',\n      templateUrl: 'app/settings/users/editPrivileges.html',\n      controller: 'EditPrivilegesController',\n      data: {\n        requireLogin: true\n      }\n    })\n\n    .state('system', {\n      abstract: true,\n      parent: 'main',\n      url: 'system',\n      templateUrl: 'app/system/system.html',\n      controller: 'SystemController',\n      data: {\n        requireLogin: true\n      }\n    })\n    .state('modules', {\n      parent: 'system',\n      url: '',\n      templateUrl: 'app/system/modules/modules.html',\n      controller: 'ModulesController',\n      data: {\n        requireLogin: true\n      }\n    })\n    .state('logs', {\n      parent: 'system',\n      url: '/logs',\n      templateUrl: 'app/system/serverLogs/serverLogs.html',\n      controller: 'LogsController',\n      data: {\n        requireLogin: true\n      }\n    })\n\n    .state('db', {\n      abstract: true,\n      parent: 'main',\n      url: 'db',\n      templateUrl: 'app/db/db.html',\n      controller: 'DBController',\n      data: {\n        requireLogin: true\n      }\n    })\n    .state('dbhome', {\n      parent: 'db',\n      url: '',\n      templateUrl: 'app/db/dbhome/dbhome.html',\n      controller: 'DBHomeController',\n      data: {\n        requireLogin: true\n      }\n    })\n    .state('tables', {\n      parent: 'db',\n      url: '/:database',\n      templateUrl: 'app/db/viewtables/viewtables.html',\n      controller: 'TableViewController',\n      data: {\n        requireLogin: true\n      }\n    })\n    .state('createtable', {\n      parent: 'db',\n      url: '/:database/createtable',\n      templateUrl: 'app/db/viewtables/createtable.html',\n      controller: 'CreateTableViewController',\n      data: {\n        requireLogin: true\n      }\n    })\n    .state('records', {\n      parent: 'db',\n      url: '/:database/:table/:page?sortBy&sortDir',\n      templateUrl: 'app/db/records/records.html',\n      controller: 'RecordsController',\n      data: {\n        requireLogin: false\n      }\n    })\n    .state('kwikwery', {\n      parent: 'main',\n      url:'query',\n      templateUrl: 'app/db/query/query.html',\n      controller: 'QueryController',\n      data: {\n        requireLogin: false\n      }\n    });\n\n    $urlRouterProvider.otherwise('/login');\n})\n// Hidden for dev (requires login to access states)\n.run(function ($window, $http, $rootScope, $location, $state, Auth) {\n\n  // Check for token on each state change\n  $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n\n    // Add token to headers for every http request\n    var jwt = $window.localStorage.getItem('nodeadmin');\n    $http.defaults.headers.common['Authorization'] = jwt;\n\n    // If state requires login and if user doesn't have token\n    if (toState.data.requireLogin && !Auth.isAuth()) {\n      // User isn't authenticated, so prevent state change\n      event.preventDefault();\n      $state.transitionTo('login');\n    }\n  });\n});\n\n"}